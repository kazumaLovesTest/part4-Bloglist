{"version":3,"sources":["components/Blog.js","components/Login.js","components/Notification.js","components/Toggleable.js","services/blogs.js","services/login.js","App.js","index.js"],"names":["Blog","blog","blogActions","useState","view","setView","blogStyle","paddingTop","paddingLeft","border","borderWidth","marginBottom","listStyle","style","className","title","onClick","deleteBlog","author","url","likes","addLike","id","handleAdding","setTitle","setUrl","setAuthor","onSubmit","event","preventDefault","alert","type","name","value","onChange","target","LoginForm","login","setUsername","setPassword","prototype","propTypes","object","isRequired","func","handleLogin","username","password","Notification","notification","errorMessage","succuses","message","notificationStyle","borderRadius","fontSize","padding","textAlign","Togglable","React","forwardRef","props","ref","displayName","visible","setVisible","showWhenVisible","display","hiddenWHenVisible","toggleVisibility","useImperativeHandle","buttonLabel","children","baseUrl","token","getAll","axios","get","then","response","data","addBlog","a","config","headers","Authorization","post","setToken","recivedToken","updateBlog","blogUrl","put","delete","credintials","App","blogs","setBlogs","user","setUser","setNotification","setTimeout","loginSevice","window","localStorage","setItem","JSON","stringify","blogService","recievedBlog","concat","blogCopy","_id","updatedBlogs","map","sortedBlogs","sort","b","toBeDeleted","confirm","filteredBlogs","filter","loginInfo","useEffect","JsonLoggedUser","getItem","parse","blogFormref","useRef","Login","removeItem","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.b84e20e9.chunk.js","sourcesContent":["import React, { useState, } from 'react'\r\nconst Blog = (({ blog, blogActions }) => {\r\n  const [view, setView] = useState(false)\r\n  const blogStyle = {\r\n    paddingTop: 10,\r\n    paddingLeft: 2,\r\n    border: 'solid',\r\n    borderWidth: 1,\r\n    marginBottom: 5,\r\n    listStyle: 'none'\r\n  }\r\n  if (view === false)\r\n    return (\r\n      <ul style={blogStyle} className='Blog_When_hidden'>\r\n        <li>Title:{blog.title}\r\n          <button onClick={() => setView(!view)}>View</button>\r\n          <button onClick={() => blogActions.deleteBlog(blog)}>delete</button>\r\n        </li>\r\n        <li>Author:{blog.author}</li>\r\n      </ul>\r\n    )\r\n  if (view === true)\r\n    return (\r\n      <ul style={blogStyle} className='Blog_When_Viewed'>\r\n        <li>Title:{blog.title}\r\n          <button onClick={() => setView(!view)}>Hide</button>\r\n          <button onClick={() => blogActions.deleteBlog(Blog)}>delete</button></li>\r\n        <li>Author:{blog.author}</li>\r\n        <li>Link:{blog.url}</li>\r\n        <li>Likes:{blog.likes}<button onClick={() => blogActions.addLike(blog)}>Like</button></li>\r\n        <li>Id:{blog.id}</li>\r\n      </ul>\r\n    )\r\n})\r\n\r\nconst BlogForm = ({ handleAdding }) => {\r\n  const [title, setTitle] = useState('')\r\n  const [url, setUrl] = useState('')\r\n  const [author, setAuthor] = useState('')\r\n\r\n  const resetInputSet = () => {\r\n    setTitle('')\r\n    setUrl('')\r\n    setAuthor('')\r\n  }\r\n  const addBlog = (event) => {\r\n    event.preventDefault()\r\n    if (author === '' || url === '' || title === '') {\r\n      alert('You must fill all blanks')\r\n      return\r\n    }\r\n    const blog = {\r\n      author: author,\r\n      title: title,\r\n      url: url,\r\n    }\r\n    handleAdding(blog)\r\n    resetInputSet()\r\n  }\r\n  return (\r\n    <>\r\n      <form onSubmit={addBlog}>\r\n        Author:<input id = 'author' type='text' name='author' value={author} onChange={({ target }) => setAuthor(target.value)} />\r\n        <br />\r\n        Title:<input id = 'title' type='text' name='title' value={title} onChange={({ target }) => setTitle(target.value)} />\r\n        <br />\r\n        URL:<input id = 'url' type='url' name='url' value={url} onChange={({ target }) => setUrl(target.value)} />\r\n        <br />\r\n        <button id = 'submit' type='submit'>Add blog</button>\r\n      </form>\r\n    </>\r\n  )\r\n}\r\nexport default { Blog, BlogForm }","import React from 'react'\r\nimport propTypes from 'prop-types'\r\nconst LoginForm = ({ login, setUsername, setPassword }) => {\r\n  LoginForm.prototype = {\r\n    login: propTypes.object.isRequired,\r\n    setUsername: propTypes.func.isRequired,\r\n    setPassword: propTypes.func.isRequired\r\n  }\r\n  return (\r\n    <>\r\n      <form onSubmit={login.handleLogin}>\r\n        username:<input id='username' type='text'\r\n          name='username'\r\n          value={login.username}\r\n          onChange={({ target }) => setUsername(target.value)} />\r\n        <br />\r\n        password:<input id='password' type='password'\r\n          name='password'\r\n          value={login.password}\r\n          onChange={({ target }) => setPassword(target.value)} />\r\n        <br />\r\n        <button type='sumbit'>login</button>\r\n      </form>\r\n    </>\r\n  )\r\n}\r\n\r\nexport default LoginForm","import React from 'react'\r\nconst Notification = ({ notification }) => {\r\n  if (notification.errorMessage === null && notification.succuses === null)\r\n    return (\r\n      <>\r\n      </>\r\n    )\r\n  let message = notification.errorMessage\r\n  const notificationStyle = {\r\n    border: '5px solid red',\r\n    borderRadius: '14px',\r\n    fontSize: '20px',\r\n    padding: '20px',\r\n    textAlign:'center'\r\n  }\r\n  if (notification.errorMessage === null) {\r\n    notificationStyle.border = '5px solid green'\r\n    message = notification.succuses\r\n  }\r\n\r\n  return (\r\n    <p style={notificationStyle} className='notification'>{message}</p>\r\n  )\r\n}\r\n\r\nexport default Notification","import PropTypes from 'prop-types'\r\nimport React, { useState, useImperativeHandle } from 'react'\r\nconst Togglable = React.forwardRef((props, ref) => {\r\n  Togglable.displayName = 'togglable'\r\n  const [visible, setVisible] = useState(false)\r\n  const showWhenVisible = { display: visible ? '' : 'none' }\r\n  const hiddenWHenVisible = { display: visible ? 'none' : '' }\r\n\r\n  Togglable.propTypes ={\r\n    buttonLabel:PropTypes.string.isRequired\r\n  }\r\n  const toggleVisibility = () => {\r\n    setVisible(!visible)\r\n  }\r\n\r\n  useImperativeHandle(ref, () => {\r\n    return {\r\n      toggleVisibility\r\n    }\r\n  })\r\n  return (\r\n    <>\r\n      <div style={hiddenWHenVisible}>\r\n        <button onClick={toggleVisibility}>{props.buttonLabel}</button>\r\n      </div>\r\n      <div style={showWhenVisible}>\r\n        {props.children}\r\n        <button onClick={toggleVisibility}>cancel</button>\r\n      </div>\r\n    </>\r\n  )\r\n})\r\n\r\nexport default Togglable","import axios from 'axios'\r\nconst baseUrl = '/api/blogs'\r\n\r\nlet token = null\r\n\r\nconst getAll = () => {\r\n  const request = axios.get(baseUrl)\r\n  return request.then(response => response.data)\r\n}\r\n\r\nconst setToken = (recivedToken) => {\r\n  token = `bearer ${recivedToken}`\r\n}\r\n\r\nconst addBlog = async (blog) => {\r\n  const config = {\r\n    headers: { Authorization: token },\r\n  }\r\n  const response = await axios.post(baseUrl, blog, config)\r\n  return response.data\r\n}\r\n\r\nconst updateBlog = async (blog) => {\r\n  const config = {\r\n    headers: { Authorization: token },\r\n  }\r\n  const blogUrl = `${baseUrl}/${blog.id}`\r\n  const response = await axios.put(blogUrl,blog,config)\r\n  return response.data\r\n}\r\n\r\nconst deleteBlog =  async (blog) => {\r\n  const config = {\r\n    headers: { Authorization: token },\r\n  }\r\n  const blogUrl = `${baseUrl}/${blog.id}`\r\n  const response = await axios.delete(blogUrl,config)\r\n  return response\r\n}\r\n\r\nexport default { getAll, addBlog, setToken,updateBlog,deleteBlog }","import axios from 'axios'\r\nconst baseUrl = '/api/login'\r\n\r\nconst login = async credintials => {\r\n  const response = await axios.post(baseUrl, credintials)\r\n  return response.data\r\n}\r\n\r\nexport default { login }","import React, { useState, useEffect, useRef } from 'react'\r\nimport Blog from './components/Blog'\r\nimport LoginForm from './components/Login'\r\nimport Notification from './components/Notification'\r\nimport Togglable from './components/Toggleable'\r\nimport blogService from './services/blogs'\r\nimport loginSevice from './services/login'\r\n\r\nconst App = () => {\r\n  const [blogs, setBlogs] = useState([])\r\n  const [username, setUsername] = useState('')\r\n  const [password, setPassword] = useState('')\r\n  const [user, setUser] = useState(null)\r\n  const [notification, setNotification] = useState({ errorMessage: null, succuses: null })\r\n\r\n  const resetInputSet = () => {\r\n    setUsername('')\r\n    setPassword('')\r\n  }\r\n  const handleLogin = async (event) => {\r\n    event.preventDefault()\r\n    if (username === '' || password === '') {\r\n      setNotification({ ...notification, errorMessage: 'Give both username and password' })\r\n      setTimeout(() => {\r\n        setNotification({ ...notification, errorMessage: null })\r\n      }, 3000)\r\n      return\r\n    }\r\n    const credintials = {\r\n      username: username,\r\n      password: password\r\n    }\r\n    try {\r\n      const user = await loginSevice.login(credintials)\r\n      window.localStorage.setItem(\r\n        'loggedBloglistAppUser', JSON.stringify(user)\r\n      )\r\n      blogService.setToken(user.token)\r\n      setUser(user)\r\n      resetInputSet()\r\n    }\r\n    catch (exception) {\r\n      setNotification({ ...notification, errorMessage: 'wrong username or password' })\r\n      setTimeout(() => {\r\n        setNotification({ ...notification, errorMessage: null })\r\n      }, 3000)\r\n    }\r\n  }\r\n  const handleAdding = async (blog) => {\r\n    try {\r\n      const recievedBlog = await blogService.addBlog(blog)\r\n      setBlogs(blogs.concat(recievedBlog))\r\n      setNotification({ ...notification, succuses: `${recievedBlog.title} was added` })\r\n      setTimeout(() => {\r\n        setNotification({ ...notification, succuses: null })\r\n      }, 3000)\r\n    }\r\n    catch (exception) {\r\n      setNotification({ ...notification, errorMessage: `couldnt add blog because ${exception}` })\r\n      setTimeout(() => {\r\n        setNotification({ ...notification, errorMessage: null })\r\n      }, 3000)\r\n    }\r\n  }\r\n  const addLike = async (blog) => {\r\n    const blogCopy = { ...blog, likes: blog.likes + 1, user: user._id }\r\n    try {\r\n      const recievedBlog = await blogService.updateBlog(blogCopy)\r\n      const updatedBlogs = blogs.map(blog => blog.id === recievedBlog.id ? recievedBlog : blog)\r\n      const sortedBlogs = updatedBlogs.sort((a, b) => {\r\n        if (a.likes < b.likes)\r\n          return 1\r\n        else if (a.likes > b.likes)\r\n          return -1\r\n        return 0\r\n      })\r\n      setBlogs(sortedBlogs)\r\n    }\r\n    catch (exception) {\r\n      setNotification({ ...notification, errorMessage: `couldnt add like because ${exception}` })\r\n      setTimeout(() => {\r\n        setNotification({ ...notification, errorMessage: null })\r\n      }, 3000)\r\n    }\r\n  }\r\n  const deleteBlog = async (toBeDeleted) => {\r\n    if (window.confirm('Are you sure you want to delete this blog?') === false)\r\n      return\r\n    try {\r\n      await blogService.deleteBlog(toBeDeleted)\r\n      const filteredBlogs = blogs.filter(blog => blog.id === toBeDeleted.id ? false : true)\r\n      setBlogs(filteredBlogs)\r\n      setNotification({ ...notification, succuses: `${toBeDeleted.title} was deleted` })\r\n      setTimeout(() => {\r\n        setNotification({ ...notification, succuses: null })\r\n      }, 3000)\r\n    }\r\n    catch (exception) {\r\n      setNotification({ ...notification, errorMessage: `couldnt delete blog because ${exception}` })\r\n      setTimeout(() => {\r\n        setNotification({ ...notification, errorMessage: null })\r\n      }, 3000)\r\n    }\r\n  }\r\n  const logOut = () => {\r\n    window.localStorage.removeItem('loggedBloglistAppUser')\r\n    setUser(null)\r\n  }\r\n\r\n  const loginInfo = {\r\n    username: username,\r\n    password: password,\r\n    handleLogin: handleLogin,\r\n  }\r\n\r\n  useEffect(() => {\r\n    blogService.getAll().then((blogs) => {\r\n      const sortedBlogs = blogs.sort((a, b) => {\r\n        if (a.likes < b.likes)\r\n          return 1\r\n        if (a.likes > b.likes)\r\n          return -1\r\n        return 0\r\n      })\r\n      setBlogs(sortedBlogs)\r\n    })\r\n  }, [])\r\n\r\n  useEffect(() => {\r\n    const JsonLoggedUser = window.localStorage.getItem('loggedBloglistAppUser')\r\n    if (JsonLoggedUser) {\r\n      const user = JSON.parse(JsonLoggedUser)\r\n      blogService.setToken(user.token)\r\n      setUser(user)\r\n    }\r\n  }, [])\r\n  const blogFormref = useRef()\r\n  const blogForm = () => (\r\n    <Togglable buttonLabel=\"add blog\" ref={blogFormref}>\r\n      <Blog.BlogForm handleAdding={handleAdding} />\r\n    </Togglable>\r\n  )\r\n  const blogActions = {\r\n    addLike: addLike,\r\n    deleteBlog: deleteBlog\r\n  }\r\n  if (user === null)\r\n    return (\r\n      <>\r\n        <LoginForm login={loginInfo} setUsername={setUsername} setPassword={setPassword} />\r\n        <Notification notification={notification} />\r\n      </>\r\n    )\r\n  return (\r\n    <div>\r\n      <h2>blogs</h2>\r\n      {blogs.map(blog =>\r\n        <Blog.Blog key={blog.id} blog={blog} blogActions={blogActions} />\r\n      )}\r\n      <br />\r\n      {user.username} Logged in <button onClick={logOut}>Log Out</button>\r\n      {blogForm()}\r\n      <Notification notification={notification} />\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default App","import React from 'react'\r\nimport ReactDOM from 'react-dom'\r\nimport App from './App'\r\n\r\nReactDOM.render(<App />, document.getElementById('root'))"],"sourceRoot":""}